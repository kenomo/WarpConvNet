name: Build and upload wheels

on:
  push:
    tags:
      - v*
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up CUDA (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: '12.1'

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.2
      env:
        CIBW_BUILD: cp39-* cp310-* cp311-* cp312-*
        CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_*"
        CIBW_ARCHS_LINUX: x86_64
        CIBW_ARCHS_MACOS: x86_64 arm64
        CIBW_ARCHS_WINDOWS: AMD64
        CIBW_ENVIRONMENT_LINUX: CUDA_HOME=/usr/local/cuda PATH=/usr/local/cuda/bin:$PATH
        CIBW_BEFORE_ALL_LINUX: |
          yum install -y epel-release
          yum install -y cuda-toolkit-12-1 || apt-get update && apt-get install -y nvidia-cuda-toolkit
        CIBW_TEST_COMMAND: python -c "import warpconvnet; print('Import successful')"

    - uses: actions/upload-artifact@v3
      with:
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build sdist
      run: pipx run build --sdist

    - uses: actions/upload-artifact@v3
      with:
        path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: artifact
        path: dist

    - uses: pypa/gh-action-pypi-publish@v1.8.10
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }} 